{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","text","setText","binary","setBinary","hex","setHex","useEffect","arr","i","length","str","hexStr","parseInt","toString","console","log","push","bwipjs","toCanvas","bcid","scale","height","includetext","textxalign","e","className","id","join","noValidate","autoComplete","TextField","onChange","event","target","value","match","label","variant","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAuEeA,MAlEf,WAAgB,IAAD,EAEYC,mBAAS,IAFrB,mBAELC,EAFK,KAECC,EAFD,OAGgBF,mBAAS,IAHzB,mBAGLG,EAHK,KAGGC,EAHH,OAIUJ,oBAAS,GAJnB,mBAILK,EAJK,KAIAC,EAJA,KAqCb,OA/BAC,qBAAU,WACR,IAAIC,EAAM,GACV,IACE,IAAI,IAAIC,EAAI,EAAGA,EAAIR,EAAKS,OAAQD,IAAI,CAClC,IAAIE,EAAM,GACNC,EAASC,SAASZ,EAAKQ,GAAI,IAAIK,SAAS,GAE5C,GADAC,QAAQC,IAAIJ,EAAQA,EAAOF,QACxBE,EAAOF,OAAS,EACjB,IAAI,IAAID,EAAI,EAAGA,EAAI,EAAIG,EAAOF,OAAQD,IACpCE,GAAO,IAGXI,QAAQC,IAAIL,GACZH,EAAIS,KAAKN,EAAME,SAASZ,EAAKQ,GAAI,IAAIK,SAAS,IAEhDV,EAAUI,GACKU,IAAOC,SAAS,WAAY,CACvCC,KAAM,UACNnB,KAAMA,EACNoB,MAAO,EACPC,OAAQ,GACRC,aAAa,EACbC,WAAY,WAEd,MAAOC,OAIV,CAACxB,IAIF,qBAAKyB,UAAU,MAAf,SACE,uBAAMA,UAAU,aAAhB,UACA,+CACA,qDACCzB,GAAQ,wBAAQ0B,GAAG,aACnBtB,GAAO,4BAAIF,EAAOyB,KAAK,OACtB,gCACE,sBAAMF,UAAW,OAAQG,YAAU,EAACC,aAAa,MAAjD,SACE,cAACC,EAAA,EAAD,CAAWC,SAAU,SAACC,GAEjBA,EAAMC,OAAOC,MAAMC,MADX,cACqB,IAC9B9B,GAAO,GACPJ,EAAQ+B,EAAMC,OAAOC,SAErB7B,GAAO,GACPJ,EAAQ,MAETyB,GAAG,iBAAiBU,MAAM,SAASC,QAAQ,eAEhD,+FACA,yDACA,+DCpDKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9d72eb8e.chunk.js","sourcesContent":["import './App.css';\nimport React, {useEffect, useState} from 'react'\nimport bwipjs from \"bwip-js\";\nimport TextField from '@material-ui/core/TextField';\n\nfunction App() {\n\n  const [ text, setText] = useState('');\n  const [ binary, setBinary] = useState([]);\n  const [ hex, setHex] = useState(false);\n\n  useEffect(()=>{\n    let arr = [];\n    try {\n      for(let i = 0; i < text.length; i++){\n        let str = '';\n        let hexStr = parseInt(text[i], 16).toString(2);\n        console.log(hexStr, hexStr.length);\n        if(hexStr.length < 4){\n          for(let i = 0; i < 4 - hexStr.length; i++){\n            str += '0';\n          }\n        }\n        console.log(str);\n        arr.push(str + parseInt(text[i], 16).toString(2))\n      }\n      setBinary(arr)\n        let canvas = bwipjs.toCanvas(\"mycanvas\", {\n          bcid: \"plessey\", // Barcode type\n          text: text, // Text to encode\n          scale: 3, // 3x scaling factor\n          height: 10, // Bar height, in millimeters\n          includetext: true, // Show human-readable text\n          textxalign: \"center\" // Always good to set this\n        });\n      } catch (e) {\n        // `e` may be a string or Error object\n      }\n\n  }, [text]);\n\n\n  return (\n    <div className=\"App\">\n      <body className=\"App-header\">\n      <p>Maslov KP-01mp</p>\n      <p>Variant 14 - Plessey</p>\n      {text && <canvas id=\"mycanvas\"></canvas>}\n      {hex && <p>{binary.join(' ')}</p>}\n        <div>\n          <form className={'root'} noValidate autoComplete=\"off\">\n            <TextField onChange={(event)=> {\n              const re = /[0-9A-F]*/g;\n              if(event.target.value.match(re)[0]){\n                setHex(true);\n                setText(event.target.value)\n              } else{\n                setHex(false)\n                setText('')\n              }\n            }} id=\"outlined-basic\" label=\"Encode\" variant=\"outlined\" />\n          </form>\n          <h5>This symbology supports the following hexadecimal characters:</h5>\n          <p>All numeric digits (0-9)</p>\n          <p>Uppercase letters A-F</p>\n        </div>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}